一、安装git
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

二、初始化、添加文件
	初始化一个Git仓库，使用git init命令。
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。

三、查看工作区状态
	git status
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

四、版本回退
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git 	reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

五、工作区和暂存区
	暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。

六、管理修改
	每次修改，如果不用git add到暂存区，那就不会加入到commit中。

七、撤销修改
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git 		checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步		，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过		前提是没有推送到远程库。

八、删除文件
	命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删	，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

九、添加远程仓库
	先创建ssh key 	$ ssh-keygen -t rsa -C "youremail@example.com"

	创建GitHub账号，添加ssh

	关联远程仓库 ： $ git remote add origin git@github.com:michaelliao/learngit.git
	
	推送本地仓库内容 : $ git push -u origin master
	
	总结：
		(1) 要关联一个远程库，使用命令git remote add origin git@server-			name:path/repo-name.git；

		(2) 关联后，使用命令git push -u origin master第一次推送master分支的所有内		    容；

		(3) 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master		    推送最新修改；

		(4) 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也		    就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有		    网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

十、从远程仓库克隆
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

十一、创建分支与合并分支
	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

十二、解决冲突
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

	用git log --graph命令可以看到分支合并图。

十三、分支管理策略
	分支策略：
	在实际开发中，我们应该按照几个基本原则进行分支管理：

	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0	版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上	合并就可以了。

	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

十四、bug分支
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；

	在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

十五、